<?xml version='1.1' encoding='UTF-8'?>
<org.jenkinsci.plugins.cppcheck.CppcheckSourceContainer plugin="cppcheck@1.21">
  <internalMap>
    <entry>
      <int>1</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>1</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>2</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>2</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>34</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>3</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>3</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>4</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>4</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>5</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>5</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>121</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Edge&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>6</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>6</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>7</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>7</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>8</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>8</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>9</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>9</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>10</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AbstractAgent.hpp</fileName>
        <cppcheckFile>
          <key>10</key>
          <fileName>src/AbstractAgent.hpp</fileName>
          <lineNumber>59</lineNumber>
          <severity>style</severity>
          <cppCheckId>funcArgNamesDifferent</cppCheckId>
          <message>Function &apos;addPercept&apos; argument 1 names different: declaration &apos;anAbstractPercept&apos; definition &apos;aPercept&apos;.</message>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>11</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>11</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>12</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>12</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>13</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>13</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>14</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>14</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>15</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>15</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>16</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>16</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>17</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>17</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>18</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>18</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>138</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>19</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>19</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>51</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>20</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>20</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Message&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>21</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/CommunicationService.hpp</fileName>
        <cppcheckFile>
          <key>21</key>
          <fileName>src/CommunicationService.hpp</fileName>
          <lineNumber>39</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aRequestHandler&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aRequestHandler&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>22</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Session.hpp</fileName>
        <cppcheckFile>
          <key>22</key>
          <fileName>src/Session.hpp</fileName>
          <lineNumber>227</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aRequestHandler&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aRequestHandler&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>23</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Session.hpp</fileName>
        <cppcheckFile>
          <key>23</key>
          <fileName>src/Session.hpp</fileName>
          <lineNumber>285</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aMessage&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aMessage&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>24</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Server.hpp</fileName>
        <cppcheckFile>
          <key>24</key>
          <fileName>src/Server.hpp</fileName>
          <lineNumber>20</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aRequestHandler&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aRequestHandler&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>25</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/CommunicationService.cpp</fileName>
        <cppcheckFile>
          <key>25</key>
          <fileName>src/CommunicationService.cpp</fileName>
          <lineNumber>25</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aRequestHandler&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aRequestHandler&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>26</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>26</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>27</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>27</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>28</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>28</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>29</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WayPoint.hpp</fileName>
        <cppcheckFile>
          <key>29</key>
          <fileName>src/WayPoint.hpp</fileName>
          <lineNumber>25</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>30</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Goal.hpp</fileName>
        <cppcheckFile>
          <key>30</key>
          <fileName>src/Goal.hpp</fileName>
          <lineNumber>27</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Goal&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Goal&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>31</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>31</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>32</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>32</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>33</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>33</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>34</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>34</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>35</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ViewObject.hpp</fileName>
        <cppcheckFile>
          <key>35</key>
          <fileName>src/ViewObject.hpp</fileName>
          <lineNumber>35</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>36</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WayPoint.hpp</fileName>
        <cppcheckFile>
          <key>36</key>
          <fileName>src/WayPoint.hpp</fileName>
          <lineNumber>25</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>37</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Goal.hpp</fileName>
        <cppcheckFile>
          <key>37</key>
          <fileName>src/Goal.hpp</fileName>
          <lineNumber>27</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Goal&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Goal&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>38</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.hpp</fileName>
        <cppcheckFile>
          <key>38</key>
          <fileName>src/RectangleShape.hpp</fileName>
          <lineNumber>24</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>39</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WayPointShape.hpp</fileName>
        <cppcheckFile>
          <key>39</key>
          <fileName>src/WayPointShape.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WayPointShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WayPointShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>40</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/GoalShape.hpp</fileName>
        <cppcheckFile>
          <key>40</key>
          <fileName>src/GoalShape.hpp</fileName>
          <lineNumber>22</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;GoalShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;GoalShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>41</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Shape.hpp</fileName>
        <cppcheckFile>
          <key>41</key>
          <fileName>src/Shape.hpp</fileName>
          <lineNumber>68</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aModelObject&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aModelObject&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>42</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/GoalShape.cpp</fileName>
        <cppcheckFile>
          <key>42</key>
          <fileName>src/GoalShape.cpp</fileName>
          <lineNumber>11</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aGoal&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aGoal&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>43</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>43</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>44</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>44</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>45</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>45</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>46</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LaserDistanceSensor.hpp</fileName>
        <cppcheckFile>
          <key>46</key>
          <fileName>src/LaserDistanceSensor.hpp</fileName>
          <lineNumber>40</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;DistancePercept&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;DistancePercept&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>47</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LaserDistanceSensor.hpp</fileName>
        <cppcheckFile>
          <key>47</key>
          <fileName>src/LaserDistanceSensor.hpp</fileName>
          <lineNumber>72</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;LaserDistanceSensor&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;LaserDistanceSensor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>48</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>48</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>34</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>49</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>49</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>138</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>50</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>50</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>51</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>51</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Robot.hpp</fileName>
        <cppcheckFile>
          <key>51</key>
          <fileName>src/Robot.hpp</fileName>
          <lineNumber>47</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Robot&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Robot&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>52</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>52</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>121</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Edge&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>53</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>53</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>54</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>54</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Message&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>55</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.hpp</fileName>
        <cppcheckFile>
          <key>55</key>
          <fileName>src/LineShape.hpp</fileName>
          <lineNumber>151</lineNumber>
          <severity>style</severity>
          <cppCheckId>functionConst</cppCheckId>
          <message>Technically the member function &apos;View::LineShape::getNode1&apos; can be const.</message>
          <verbose>The member function &apos;View::LineShape::getNode1&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>56</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.hpp</fileName>
        <cppcheckFile>
          <key>56</key>
          <fileName>src/LineShape.hpp</fileName>
          <lineNumber>160</lineNumber>
          <severity>style</severity>
          <cppCheckId>functionConst</cppCheckId>
          <message>Technically the member function &apos;View::LineShape::getNode2&apos; can be const.</message>
          <verbose>The member function &apos;View::LineShape::getNode2&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>57</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>57</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>58</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>58</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>59</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>59</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>60</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ViewObject.hpp</fileName>
        <cppcheckFile>
          <key>60</key>
          <fileName>src/ViewObject.hpp</fileName>
          <lineNumber>35</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>61</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.hpp</fileName>
        <cppcheckFile>
          <key>61</key>
          <fileName>src/RectangleShape.hpp</fileName>
          <lineNumber>24</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>62</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>62</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>63</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Shape.hpp</fileName>
        <cppcheckFile>
          <key>63</key>
          <fileName>src/Shape.hpp</fileName>
          <lineNumber>68</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aModelObject&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aModelObject&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>64</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.hpp</fileName>
        <cppcheckFile>
          <key>64</key>
          <fileName>src/LineShape.hpp</fileName>
          <lineNumber>141</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aNode1&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aNode1&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>65</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.hpp</fileName>
        <cppcheckFile>
          <key>65</key>
          <fileName>src/LineShape.hpp</fileName>
          <lineNumber>145</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aNode2&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aNode2&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>66</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.cpp</fileName>
        <cppcheckFile>
          <key>66</key>
          <fileName>src/LineShape.cpp</fileName>
          <lineNumber>13</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aNode1&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aNode1&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>67</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.cpp</fileName>
        <cppcheckFile>
          <key>67</key>
          <fileName>src/LineShape.cpp</fileName>
          <lineNumber>14</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aNode2&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aNode2&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>68</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.cpp</fileName>
        <cppcheckFile>
          <key>68</key>
          <fileName>src/LineShape.cpp</fileName>
          <lineNumber>31</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aModelObject&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aModelObject&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>69</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.cpp</fileName>
        <cppcheckFile>
          <key>69</key>
          <fileName>src/LineShape.cpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aNode1&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aNode1&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>70</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.cpp</fileName>
        <cppcheckFile>
          <key>70</key>
          <fileName>src/LineShape.cpp</fileName>
          <lineNumber>33</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aNode2&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aNode2&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>71</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.cpp</fileName>
        <cppcheckFile>
          <key>71</key>
          <fileName>src/LineShape.cpp</fileName>
          <lineNumber>313</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aNode&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aNode&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>72</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/MainFrameWindow.hpp</fileName>
        <cppcheckFile>
          <key>72</key>
          <fileName>src/MainFrameWindow.hpp</fileName>
          <lineNumber>31</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;MainFrameWindow&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;MainFrameWindow&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>73</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/MainFrameWindow.hpp</fileName>
        <cppcheckFile>
          <key>73</key>
          <fileName>src/MainFrameWindow.hpp</fileName>
          <lineNumber>31</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;MainFrameWindow&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;MainFrameWindow&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>74</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>74</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>75</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>75</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>76</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/NotificationFunctionTypeTraits.hpp</fileName>
        <cppcheckFile>
          <key>76</key>
          <fileName>src/NotificationFunctionTypeTraits.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>performance</severity>
          <cppCheckId>functionStatic</cppCheckId>
          <message>Technically the member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be static.</message>
          <verbose>The member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>77</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/NotificationFunctionTypeTraits.hpp</fileName>
        <cppcheckFile>
          <key>77</key>
          <fileName>src/NotificationFunctionTypeTraits.hpp</fileName>
          <lineNumber>29</lineNumber>
          <severity>performance</severity>
          <cppCheckId>functionStatic</cppCheckId>
          <message>Technically the member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be static.</message>
          <verbose>The member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>78</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Client.hpp</fileName>
        <cppcheckFile>
          <key>78</key>
          <fileName>src/Client.hpp</fileName>
          <lineNumber>54</lineNumber>
          <severity>style</severity>
          <cppCheckId>functionConst</cppCheckId>
          <message>Technically the member function &apos;Messaging::Client::handleConnect&apos; can be const.</message>
          <verbose>The member function &apos;Messaging::Client::handleConnect&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>79</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/MainFrameWindow.hpp</fileName>
        <cppcheckFile>
          <key>79</key>
          <fileName>src/MainFrameWindow.hpp</fileName>
          <lineNumber>31</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;MainFrameWindow&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;MainFrameWindow&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>80</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>80</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>81</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>81</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>82</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>82</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>83</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ViewObject.hpp</fileName>
        <cppcheckFile>
          <key>83</key>
          <fileName>src/ViewObject.hpp</fileName>
          <lineNumber>35</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>84</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/NotificationHandler.hpp</fileName>
        <cppcheckFile>
          <key>84</key>
          <fileName>src/NotificationHandler.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;NotificationHandler&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;NotificationHandler&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>85</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotWorldCanvas.hpp</fileName>
        <cppcheckFile>
          <key>85</key>
          <fileName>src/RobotWorldCanvas.hpp</fileName>
          <lineNumber>36</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;RobotWorldCanvas&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;RobotWorldCanvas&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>86</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WidgetDebugTraceFunction.hpp</fileName>
        <cppcheckFile>
          <key>86</key>
          <fileName>src/WidgetDebugTraceFunction.hpp</fileName>
          <lineNumber>22</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WidgetDebugTraceFunction&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WidgetDebugTraceFunction&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>87</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>87</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>34</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>88</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>88</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>138</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>89</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>89</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>51</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>90</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Robot.hpp</fileName>
        <cppcheckFile>
          <key>90</key>
          <fileName>src/Robot.hpp</fileName>
          <lineNumber>47</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Robot&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Robot&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>91</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>91</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>121</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Edge&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>92</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>92</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>93</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>93</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Message&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>94</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Shape.hpp</fileName>
        <cppcheckFile>
          <key>94</key>
          <fileName>src/Shape.hpp</fileName>
          <lineNumber>68</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aModelObject&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aModelObject&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>95</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/CommunicationService.hpp</fileName>
        <cppcheckFile>
          <key>95</key>
          <fileName>src/CommunicationService.hpp</fileName>
          <lineNumber>39</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aRequestHandler&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aRequestHandler&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>96</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Session.hpp</fileName>
        <cppcheckFile>
          <key>96</key>
          <fileName>src/Session.hpp</fileName>
          <lineNumber>227</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aRequestHandler&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aRequestHandler&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>97</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Session.hpp</fileName>
        <cppcheckFile>
          <key>97</key>
          <fileName>src/Session.hpp</fileName>
          <lineNumber>285</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aMessage&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aMessage&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>98</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>98</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>99</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>99</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>100</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>100</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>101</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/NotificationFunctionTypeTraits.hpp</fileName>
        <cppcheckFile>
          <key>101</key>
          <fileName>src/NotificationFunctionTypeTraits.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>performance</severity>
          <cppCheckId>functionStatic</cppCheckId>
          <message>Technically the member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be static.</message>
          <verbose>The member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>102</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/NotificationFunctionTypeTraits.hpp</fileName>
        <cppcheckFile>
          <key>102</key>
          <fileName>src/NotificationFunctionTypeTraits.hpp</fileName>
          <lineNumber>29</lineNumber>
          <severity>performance</severity>
          <cppCheckId>functionStatic</cppCheckId>
          <message>Technically the member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be static.</message>
          <verbose>The member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>103</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/NotificationHandler.hpp</fileName>
        <cppcheckFile>
          <key>103</key>
          <fileName>src/NotificationHandler.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;NotificationHandler&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;NotificationHandler&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>104</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>104</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>funcArgNamesDifferent</cppCheckId>
          <message>Function &apos;addObserver&apos; argument 1 names different: declaration &apos;anObserver&apos; definition &apos;aObserver&apos;.</message>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>105</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>105</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>69</lineNumber>
          <severity>style</severity>
          <cppCheckId>funcArgNamesDifferent</cppCheckId>
          <message>Function &apos;removeObserver&apos; argument 1 names different: declaration &apos;anObserver&apos; definition &apos;aObserver&apos;.</message>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>106</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>106</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>107</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>107</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>108</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>108</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>109</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>109</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>110</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.hpp</fileName>
        <cppcheckFile>
          <key>110</key>
          <fileName>src/RectangleShape.hpp</fileName>
          <lineNumber>36</lineNumber>
          <severity>style</severity>
          <cppCheckId>funcArgNamesDifferent</cppCheckId>
          <message>Function &apos;RectangleShape&apos; argument 2 names different: declaration &apos;aCentrePoint&apos; definition &apos;aPoint&apos;.</message>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>111</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.hpp</fileName>
        <cppcheckFile>
          <key>111</key>
          <fileName>src/RectangleShape.hpp</fileName>
          <lineNumber>28</lineNumber>
          <severity>style</severity>
          <cppCheckId>funcArgNamesDifferent</cppCheckId>
          <message>Function &apos;RectangleShape&apos; argument 1 names different: declaration &apos;aCentrePoint&apos; definition &apos;aPoint&apos;.</message>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>112</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.cpp</fileName>
        <cppcheckFile>
          <key>112</key>
          <fileName>src/RectangleShape.cpp</fileName>
          <lineNumber>60</lineNumber>
          <severity>warning</severity>
          <cppCheckId>operatorEqVarError</cppCheckId>
          <message>Member variable &apos;RectangleShape::titleSize&apos; is not assigned a value in &apos;RectangleShape::operator=&apos;.</message>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>113</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>113</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>114</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>114</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>115</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>115</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>116</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ViewObject.hpp</fileName>
        <cppcheckFile>
          <key>116</key>
          <fileName>src/ViewObject.hpp</fileName>
          <lineNumber>35</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>117</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.hpp</fileName>
        <cppcheckFile>
          <key>117</key>
          <fileName>src/RectangleShape.hpp</fileName>
          <lineNumber>24</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>118</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.hpp</fileName>
        <cppcheckFile>
          <key>118</key>
          <fileName>src/RectangleShape.hpp</fileName>
          <lineNumber>18</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;RectangleShape&apos; has &apos;operator=&apos; but lack of &apos;copy constructor&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>119</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>119</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>120</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Shape.hpp</fileName>
        <cppcheckFile>
          <key>120</key>
          <fileName>src/Shape.hpp</fileName>
          <lineNumber>68</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aModelObject&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aModelObject&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>121</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.cpp</fileName>
        <cppcheckFile>
          <key>121</key>
          <fileName>src/RectangleShape.cpp</fileName>
          <lineNumber>22</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aModelObject&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aModelObject&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>122</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Client.hpp</fileName>
        <cppcheckFile>
          <key>122</key>
          <fileName>src/Client.hpp</fileName>
          <lineNumber>54</lineNumber>
          <severity>style</severity>
          <cppCheckId>functionConst</cppCheckId>
          <message>Technically the member function &apos;Messaging::Client::handleConnect&apos; can be const.</message>
          <verbose>The member function &apos;Messaging::Client::handleConnect&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>123</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>123</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>124</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>124</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>125</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>125</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>126</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>126</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>34</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>127</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>127</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>138</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>128</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>128</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>51</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>129</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Robot.hpp</fileName>
        <cppcheckFile>
          <key>129</key>
          <fileName>src/Robot.hpp</fileName>
          <lineNumber>47</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Robot&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Robot&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>130</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WayPoint.hpp</fileName>
        <cppcheckFile>
          <key>130</key>
          <fileName>src/WayPoint.hpp</fileName>
          <lineNumber>25</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>131</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Goal.hpp</fileName>
        <cppcheckFile>
          <key>131</key>
          <fileName>src/Goal.hpp</fileName>
          <lineNumber>27</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Goal&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Goal&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>132</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LaserDistanceSensor.hpp</fileName>
        <cppcheckFile>
          <key>132</key>
          <fileName>src/LaserDistanceSensor.hpp</fileName>
          <lineNumber>40</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;DistancePercept&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;DistancePercept&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>133</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LaserDistanceSensor.hpp</fileName>
        <cppcheckFile>
          <key>133</key>
          <fileName>src/LaserDistanceSensor.hpp</fileName>
          <lineNumber>72</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;LaserDistanceSensor&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;LaserDistanceSensor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>134</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>134</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>121</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Edge&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>135</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>135</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>136</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>136</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Message&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>137</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/CommunicationService.hpp</fileName>
        <cppcheckFile>
          <key>137</key>
          <fileName>src/CommunicationService.hpp</fileName>
          <lineNumber>39</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aRequestHandler&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aRequestHandler&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>138</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Session.hpp</fileName>
        <cppcheckFile>
          <key>138</key>
          <fileName>src/Session.hpp</fileName>
          <lineNumber>227</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aRequestHandler&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aRequestHandler&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>139</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Session.hpp</fileName>
        <cppcheckFile>
          <key>139</key>
          <fileName>src/Session.hpp</fileName>
          <lineNumber>285</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aMessage&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aMessage&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>140</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotShape.cpp</fileName>
        <cppcheckFile>
          <key>140</key>
          <fileName>src/RobotShape.cpp</fileName>
          <lineNumber>16</lineNumber>
          <severity>warning</severity>
          <cppCheckId>uninitMemberVar</cppCheckId>
          <message>Member variable &apos;RobotShape::robotWorldCanvas&apos; is not initialized in the constructor.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>141</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/NotificationFunctionTypeTraits.hpp</fileName>
        <cppcheckFile>
          <key>141</key>
          <fileName>src/NotificationFunctionTypeTraits.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>performance</severity>
          <cppCheckId>functionStatic</cppCheckId>
          <message>Technically the member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be static.</message>
          <verbose>The member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>142</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/NotificationFunctionTypeTraits.hpp</fileName>
        <cppcheckFile>
          <key>142</key>
          <fileName>src/NotificationFunctionTypeTraits.hpp</fileName>
          <lineNumber>29</lineNumber>
          <severity>performance</severity>
          <cppCheckId>functionStatic</cppCheckId>
          <message>Technically the member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be static.</message>
          <verbose>The member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>143</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>143</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>144</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>144</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>145</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>145</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>146</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ViewObject.hpp</fileName>
        <cppcheckFile>
          <key>146</key>
          <fileName>src/ViewObject.hpp</fileName>
          <lineNumber>35</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>147</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.hpp</fileName>
        <cppcheckFile>
          <key>147</key>
          <fileName>src/RectangleShape.hpp</fileName>
          <lineNumber>24</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>148</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>148</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>34</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>149</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>149</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>138</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>150</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>150</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>51</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>151</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Robot.hpp</fileName>
        <cppcheckFile>
          <key>151</key>
          <fileName>src/Robot.hpp</fileName>
          <lineNumber>47</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Robot&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Robot&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>152</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotShape.hpp</fileName>
        <cppcheckFile>
          <key>152</key>
          <fileName>src/RobotShape.hpp</fileName>
          <lineNumber>25</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;RobotShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;RobotShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>153</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WayPoint.hpp</fileName>
        <cppcheckFile>
          <key>153</key>
          <fileName>src/WayPoint.hpp</fileName>
          <lineNumber>25</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>154</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Goal.hpp</fileName>
        <cppcheckFile>
          <key>154</key>
          <fileName>src/Goal.hpp</fileName>
          <lineNumber>27</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Goal&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Goal&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>155</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/NotificationHandler.hpp</fileName>
        <cppcheckFile>
          <key>155</key>
          <fileName>src/NotificationHandler.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;NotificationHandler&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;NotificationHandler&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>156</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotWorldCanvas.hpp</fileName>
        <cppcheckFile>
          <key>156</key>
          <fileName>src/RobotWorldCanvas.hpp</fileName>
          <lineNumber>36</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;RobotWorldCanvas&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;RobotWorldCanvas&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>157</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>157</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>121</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Edge&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>158</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>158</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>159</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>159</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Message&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>160</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Shape.hpp</fileName>
        <cppcheckFile>
          <key>160</key>
          <fileName>src/Shape.hpp</fileName>
          <lineNumber>68</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aModelObject&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aModelObject&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>161</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotShape.cpp</fileName>
        <cppcheckFile>
          <key>161</key>
          <fileName>src/RobotShape.cpp</fileName>
          <lineNumber>16</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aRobot&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aRobot&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>162</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>162</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>163</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>163</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>164</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>164</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>165</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>165</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>34</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>166</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>166</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>138</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>167</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>167</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>51</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>168</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Robot.hpp</fileName>
        <cppcheckFile>
          <key>168</key>
          <fileName>src/Robot.hpp</fileName>
          <lineNumber>47</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Robot&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Robot&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>169</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WayPoint.hpp</fileName>
        <cppcheckFile>
          <key>169</key>
          <fileName>src/WayPoint.hpp</fileName>
          <lineNumber>25</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>170</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Goal.hpp</fileName>
        <cppcheckFile>
          <key>170</key>
          <fileName>src/Goal.hpp</fileName>
          <lineNumber>27</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Goal&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Goal&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>171</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>171</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>121</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Edge&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>172</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>172</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>173</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>173</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Message&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>174</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/NotificationFunctionTypeTraits.hpp</fileName>
        <cppcheckFile>
          <key>174</key>
          <fileName>src/NotificationFunctionTypeTraits.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>performance</severity>
          <cppCheckId>functionStatic</cppCheckId>
          <message>Technically the member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be static.</message>
          <verbose>The member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>175</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/NotificationFunctionTypeTraits.hpp</fileName>
        <cppcheckFile>
          <key>175</key>
          <fileName>src/NotificationFunctionTypeTraits.hpp</fileName>
          <lineNumber>29</lineNumber>
          <severity>performance</severity>
          <cppCheckId>functionStatic</cppCheckId>
          <message>Technically the member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be static.</message>
          <verbose>The member function &apos;Base::NotificationFunctionTypeTraits::call&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>176</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.hpp</fileName>
        <cppcheckFile>
          <key>176</key>
          <fileName>src/LineShape.hpp</fileName>
          <lineNumber>151</lineNumber>
          <severity>style</severity>
          <cppCheckId>functionConst</cppCheckId>
          <message>Technically the member function &apos;View::LineShape::getNode1&apos; can be const.</message>
          <verbose>The member function &apos;View::LineShape::getNode1&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>177</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.hpp</fileName>
        <cppcheckFile>
          <key>177</key>
          <fileName>src/LineShape.hpp</fileName>
          <lineNumber>160</lineNumber>
          <severity>style</severity>
          <cppCheckId>functionConst</cppCheckId>
          <message>Technically the member function &apos;View::LineShape::getNode2&apos; can be const.</message>
          <verbose>The member function &apos;View::LineShape::getNode2&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>178</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>178</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>179</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>179</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>180</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>180</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>181</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ViewObject.hpp</fileName>
        <cppcheckFile>
          <key>181</key>
          <fileName>src/ViewObject.hpp</fileName>
          <lineNumber>35</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>182</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/NotificationHandler.hpp</fileName>
        <cppcheckFile>
          <key>182</key>
          <fileName>src/NotificationHandler.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;NotificationHandler&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;NotificationHandler&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>183</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotWorldCanvas.hpp</fileName>
        <cppcheckFile>
          <key>183</key>
          <fileName>src/RobotWorldCanvas.hpp</fileName>
          <lineNumber>36</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;RobotWorldCanvas&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;RobotWorldCanvas&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>184</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.hpp</fileName>
        <cppcheckFile>
          <key>184</key>
          <fileName>src/RectangleShape.hpp</fileName>
          <lineNumber>24</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>185</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>185</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>34</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Vertex&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>186</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>186</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>138</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;Message&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>187</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>187</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>51</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Struct &apos;MessageHeader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>188</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Robot.hpp</fileName>
        <cppcheckFile>
          <key>188</key>
          <fileName>src/Robot.hpp</fileName>
          <lineNumber>47</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Robot&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Robot&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>189</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotShape.hpp</fileName>
        <cppcheckFile>
          <key>189</key>
          <fileName>src/RobotShape.hpp</fileName>
          <lineNumber>25</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;RobotShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;RobotShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>190</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WayPoint.hpp</fileName>
        <cppcheckFile>
          <key>190</key>
          <fileName>src/WayPoint.hpp</fileName>
          <lineNumber>25</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>191</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WayPointShape.hpp</fileName>
        <cppcheckFile>
          <key>191</key>
          <fileName>src/WayPointShape.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WayPointShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WayPointShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>192</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Goal.hpp</fileName>
        <cppcheckFile>
          <key>192</key>
          <fileName>src/Goal.hpp</fileName>
          <lineNumber>27</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Goal&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Goal&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>193</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/GoalShape.hpp</fileName>
        <cppcheckFile>
          <key>193</key>
          <fileName>src/GoalShape.hpp</fileName>
          <lineNumber>22</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;GoalShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;GoalShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>194</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WallShape.hpp</fileName>
        <cppcheckFile>
          <key>194</key>
          <fileName>src/WallShape.hpp</fileName>
          <lineNumber>20</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WallShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WallShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>195</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.hpp</fileName>
        <cppcheckFile>
          <key>195</key>
          <fileName>src/AStar.hpp</fileName>
          <lineNumber>121</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Edge&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>196</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>196</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>197</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Message.hpp</fileName>
        <cppcheckFile>
          <key>197</key>
          <fileName>src/Message.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The struct &apos;Message&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>198</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Shape.hpp</fileName>
        <cppcheckFile>
          <key>198</key>
          <fileName>src/Shape.hpp</fileName>
          <lineNumber>68</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aModelObject&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aModelObject&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>199</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.hpp</fileName>
        <cppcheckFile>
          <key>199</key>
          <fileName>src/LineShape.hpp</fileName>
          <lineNumber>141</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aNode1&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aNode1&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>200</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.hpp</fileName>
        <cppcheckFile>
          <key>200</key>
          <fileName>src/LineShape.hpp</fileName>
          <lineNumber>145</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aNode2&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aNode2&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>201</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>201</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>202</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>202</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>203</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>203</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>204</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>204</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>205</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>205</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>206</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>206</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>207</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>207</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>208</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ViewObject.hpp</fileName>
        <cppcheckFile>
          <key>208</key>
          <fileName>src/ViewObject.hpp</fileName>
          <lineNumber>35</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>209</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ViewObject.cpp</fileName>
        <cppcheckFile>
          <key>209</key>
          <fileName>src/ViewObject.cpp</fileName>
          <lineNumber>16</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aModelObject&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aModelObject&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>210</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ViewObject.cpp</fileName>
        <cppcheckFile>
          <key>210</key>
          <fileName>src/ViewObject.cpp</fileName>
          <lineNumber>47</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aModelObject&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aModelObject&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>211</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>211</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>212</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>212</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>213</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>213</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>214</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>214</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>215</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.hpp</fileName>
        <cppcheckFile>
          <key>215</key>
          <fileName>src/LineShape.hpp</fileName>
          <lineNumber>151</lineNumber>
          <severity>style</severity>
          <cppCheckId>functionConst</cppCheckId>
          <message>Technically the member function &apos;View::LineShape::getNode1&apos; can be const.</message>
          <verbose>The member function &apos;View::LineShape::getNode1&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>216</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.hpp</fileName>
        <cppcheckFile>
          <key>216</key>
          <fileName>src/LineShape.hpp</fileName>
          <lineNumber>160</lineNumber>
          <severity>style</severity>
          <cppCheckId>functionConst</cppCheckId>
          <message>Technically the member function &apos;View::LineShape::getNode2&apos; can be const.</message>
          <verbose>The member function &apos;View::LineShape::getNode2&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?</verbose>
          <inconclusive>true</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>217</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>217</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>218</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>218</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>219</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>219</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>220</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ViewObject.hpp</fileName>
        <cppcheckFile>
          <key>220</key>
          <fileName>src/ViewObject.hpp</fileName>
          <lineNumber>35</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>221</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.hpp</fileName>
        <cppcheckFile>
          <key>221</key>
          <fileName>src/RectangleShape.hpp</fileName>
          <lineNumber>24</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>222</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WallShape.hpp</fileName>
        <cppcheckFile>
          <key>222</key>
          <fileName>src/WallShape.hpp</fileName>
          <lineNumber>20</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WallShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WallShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>223</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.hpp</fileName>
        <cppcheckFile>
          <key>223</key>
          <fileName>src/BoundedVector.hpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>warning</severity>
          <cppCheckId>copyCtorAndEqOperator</cppCheckId>
          <message>The class &apos;BoundedVector&apos; has &apos;copy constructor&apos; but lack of &apos;operator=&apos;.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>224</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Shape.hpp</fileName>
        <cppcheckFile>
          <key>224</key>
          <fileName>src/Shape.hpp</fileName>
          <lineNumber>68</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aModelObject&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aModelObject&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>225</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.hpp</fileName>
        <cppcheckFile>
          <key>225</key>
          <fileName>src/LineShape.hpp</fileName>
          <lineNumber>141</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aNode1&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aNode1&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>226</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.hpp</fileName>
        <cppcheckFile>
          <key>226</key>
          <fileName>src/LineShape.hpp</fileName>
          <lineNumber>145</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aNode2&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aNode2&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>227</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WallShape.cpp</fileName>
        <cppcheckFile>
          <key>227</key>
          <fileName>src/WallShape.cpp</fileName>
          <lineNumber>18</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aWall&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aWall&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>228</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WallShape.cpp</fileName>
        <cppcheckFile>
          <key>228</key>
          <fileName>src/WallShape.cpp</fileName>
          <lineNumber>28</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aWall&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aWall&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>229</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WallShape.cpp</fileName>
        <cppcheckFile>
          <key>229</key>
          <fileName>src/WallShape.cpp</fileName>
          <lineNumber>29</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aRectangleShape1&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aRectangleShape1&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>230</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WallShape.cpp</fileName>
        <cppcheckFile>
          <key>230</key>
          <fileName>src/WallShape.cpp</fileName>
          <lineNumber>30</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aRectangleShape2&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aRectangleShape2&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>231</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>231</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>232</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>232</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>233</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>233</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>234</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WayPoint.hpp</fileName>
        <cppcheckFile>
          <key>234</key>
          <fileName>src/WayPoint.hpp</fileName>
          <lineNumber>25</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>235</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>235</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>63</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>236</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.hpp</fileName>
        <cppcheckFile>
          <key>236</key>
          <fileName>src/ObjectId.hpp</fileName>
          <lineNumber>236</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ObjectId&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>237</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.hpp</fileName>
        <cppcheckFile>
          <key>237</key>
          <fileName>src/Notifier.hpp</fileName>
          <lineNumber>32</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;Notifier&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>238</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ViewObject.hpp</fileName>
        <cppcheckFile>
          <key>238</key>
          <fileName>src/ViewObject.hpp</fileName>
          <lineNumber>35</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;ViewObject&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>239</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.hpp</fileName>
        <cppcheckFile>
          <key>239</key>
          <fileName>src/RectangleShape.hpp</fileName>
          <lineNumber>24</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;RectangleShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>240</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WayPoint.hpp</fileName>
        <cppcheckFile>
          <key>240</key>
          <fileName>src/WayPoint.hpp</fileName>
          <lineNumber>25</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WayPoint&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>241</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WayPointShape.hpp</fileName>
        <cppcheckFile>
          <key>241</key>
          <fileName>src/WayPointShape.hpp</fileName>
          <lineNumber>19</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WayPointShape&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WayPointShape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>242</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Shape.hpp</fileName>
        <cppcheckFile>
          <key>242</key>
          <fileName>src/Shape.hpp</fileName>
          <lineNumber>68</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aModelObject&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aModelObject&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>243</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WayPointShape.cpp</fileName>
        <cppcheckFile>
          <key>243</key>
          <fileName>src/WayPointShape.cpp</fileName>
          <lineNumber>11</lineNumber>
          <severity>performance</severity>
          <cppCheckId>passedByValue</cppCheckId>
          <message>Function parameter &apos;aWayPoint&apos; should be passed by reference.</message>
          <verbose>Parameter &apos;aWayPoint&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>244</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WidgetDebugTraceFunction.hpp</fileName>
        <cppcheckFile>
          <key>244</key>
          <fileName>src/WidgetDebugTraceFunction.hpp</fileName>
          <lineNumber>22</lineNumber>
          <severity>style</severity>
          <cppCheckId>noExplicitConstructor</cppCheckId>
          <message>Class &apos;WidgetDebugTraceFunction&apos; has a constructor with 1 argument that is not explicit.</message>
          <verbose>Class &apos;WidgetDebugTraceFunction&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>245</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotWorldCanvas.cpp</fileName>
        <cppcheckFile>
          <key>245</key>
          <fileName>src/RobotWorldCanvas.cpp</fileName>
          <lineNumber>1400</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;OnEditWall&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>246</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/MainApplication.cpp</fileName>
        <cppcheckFile>
          <key>246</key>
          <fileName>src/MainApplication.cpp</fileName>
          <lineNumber>30</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;OnInit&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>247</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AbstractAgent.cpp</fileName>
        <cppcheckFile>
          <key>247</key>
          <fileName>src/AbstractAgent.cpp</fileName>
          <lineNumber>36</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;attachActuator&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>248</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.cpp</fileName>
        <cppcheckFile>
          <key>248</key>
          <fileName>src/LineShape.cpp</fileName>
          <lineNumber>313</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;connects&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>249</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AbstractActuator.cpp</fileName>
        <cppcheckFile>
          <key>249</key>
          <fileName>src/AbstractActuator.cpp</fileName>
          <lineNumber>36</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;detachAgent&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>250</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotWorldCanvas.cpp</fileName>
        <cppcheckFile>
          <key>250</key>
          <fileName>src/RobotWorldCanvas.cpp</fileName>
          <lineNumber>101</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;devicePointFor&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>251</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotWorldCanvas.cpp</fileName>
        <cppcheckFile>
          <key>251</key>
          <fileName>src/RobotWorldCanvas.cpp</fileName>
          <lineNumber>311</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;enableDragAndDropHandling&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>252</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.cpp</fileName>
        <cppcheckFile>
          <key>252</key>
          <fileName>src/Notifier.cpp</fileName>
          <lineNumber>26</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;enableNotification&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>253</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.cpp</fileName>
        <cppcheckFile>
          <key>253</key>
          <fileName>src/AStar.cpp</fileName>
          <lineNumber>371</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;findRemoveClosedSet&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>254</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.cpp</fileName>
        <cppcheckFile>
          <key>254</key>
          <fileName>src/AStar.cpp</fileName>
          <lineNumber>303</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;findRemoveInOpenSet&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>255</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.cpp</fileName>
        <cppcheckFile>
          <key>255</key>
          <fileName>src/LineShape.cpp</fileName>
          <lineNumber>272</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;getArrowHeadSize&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>256</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.cpp</fileName>
        <cppcheckFile>
          <key>256</key>
          <fileName>src/RectangleShape.cpp</fileName>
          <lineNumber>185</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;getBorderWidth&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>257</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.cpp</fileName>
        <cppcheckFile>
          <key>257</key>
          <fileName>src/AStar.cpp</fileName>
          <lineNumber>362</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;getClosedSet&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>258</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/MainApplication.cpp</fileName>
        <cppcheckFile>
          <key>258</key>
          <fileName>src/MainApplication.cpp</fileName>
          <lineNumber>139</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;getCommandlineFiles&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>259</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Shape2DUtils.cpp</fileName>
        <cppcheckFile>
          <key>259</key>
          <fileName>src/Shape2DUtils.cpp</fileName>
          <lineNumber>87</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;getIntersection&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>260</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.cpp</fileName>
        <cppcheckFile>
          <key>260</key>
          <fileName>src/BoundedVector.cpp</fileName>
          <lineNumber>36</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;getNormalised&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>261</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AStar.cpp</fileName>
        <cppcheckFile>
          <key>261</key>
          <fileName>src/AStar.cpp</fileName>
          <lineNumber>394</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;getPredecessorMap&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>262</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.cpp</fileName>
        <cppcheckFile>
          <key>262</key>
          <fileName>src/RectangleShape.cpp</fileName>
          <lineNumber>199</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;getSpacing&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>263</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Robot.cpp</fileName>
        <cppcheckFile>
          <key>263</key>
          <fileName>src/Robot.cpp</fileName>
          <lineNumber>154</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;getSpeed&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>264</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotWorldCanvas.cpp</fileName>
        <cppcheckFile>
          <key>264</key>
          <fileName>src/RobotWorldCanvas.cpp</fileName>
          <lineNumber>1055</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;handleActivation&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>265</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/SteeringActuator.cpp</fileName>
        <cppcheckFile>
          <key>265</key>
          <fileName>src/SteeringActuator.cpp</fileName>
          <lineNumber>29</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;handleCommand&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>266</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotWorldCanvas.cpp</fileName>
        <cppcheckFile>
          <key>266</key>
          <fileName>src/RobotWorldCanvas.cpp</fileName>
          <lineNumber>1007</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;handleEditWall&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>267</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.cpp</fileName>
        <cppcheckFile>
          <key>267</key>
          <fileName>src/RectangleShape.cpp</fileName>
          <lineNumber>120</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;isBorderPoint&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>268</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Shape2DUtils.cpp</fileName>
        <cppcheckFile>
          <key>268</key>
          <fileName>src/Shape2DUtils.cpp</fileName>
          <lineNumber>316</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;isCompassPoint&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>269</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.cpp</fileName>
        <cppcheckFile>
          <key>269</key>
          <fileName>src/Notifier.cpp</fileName>
          <lineNumber>40</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;isEnabledForNotification&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>270</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.cpp</fileName>
        <cppcheckFile>
          <key>270</key>
          <fileName>src/ObjectId.cpp</fileName>
          <lineNumber>108</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;isValid&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>271</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.cpp</fileName>
        <cppcheckFile>
          <key>271</key>
          <fileName>src/BoundedVector.cpp</fileName>
          <lineNumber>135</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;operator*&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>272</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.cpp</fileName>
        <cppcheckFile>
          <key>272</key>
          <fileName>src/BoundedVector.cpp</fileName>
          <lineNumber>119</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;operator+&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>273</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.cpp</fileName>
        <cppcheckFile>
          <key>273</key>
          <fileName>src/BoundedVector.cpp</fileName>
          <lineNumber>127</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;operator-&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>274</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.cpp</fileName>
        <cppcheckFile>
          <key>274</key>
          <fileName>src/BoundedVector.cpp</fileName>
          <lineNumber>159</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;operator/&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>275</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/ObjectId.cpp</fileName>
        <cppcheckFile>
          <key>275</key>
          <fileName>src/ObjectId.cpp</fileName>
          <lineNumber>136</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;operator&lt;&lt;&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>276</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Notifier.cpp</fileName>
        <cppcheckFile>
          <key>276</key>
          <fileName>src/Notifier.cpp</fileName>
          <lineNumber>75</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;removeAllObservers&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>277</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/BoundedVector.cpp</fileName>
        <cppcheckFile>
          <key>277</key>
          <fileName>src/BoundedVector.cpp</fileName>
          <lineNumber>45</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;reverse&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>278</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotWorldCanvas.cpp</fileName>
        <cppcheckFile>
          <key>278</key>
          <fileName>src/RobotWorldCanvas.cpp</fileName>
          <lineNumber>110</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;screenPointFor&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>279</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.cpp</fileName>
        <cppcheckFile>
          <key>279</key>
          <fileName>src/LineShape.cpp</fileName>
          <lineNumber>279</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;setArrowHeadSize&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>280</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.cpp</fileName>
        <cppcheckFile>
          <key>280</key>
          <fileName>src/RectangleShape.cpp</fileName>
          <lineNumber>192</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;setBorderWidth&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>281</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/GoalShape.cpp</fileName>
        <cppcheckFile>
          <key>281</key>
          <fileName>src/GoalShape.cpp</fileName>
          <lineNumber>31</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;setGoal&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>282</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/LineShape.cpp</fileName>
        <cppcheckFile>
          <key>282</key>
          <fileName>src/LineShape.cpp</fileName>
          <lineNumber>265</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;setLineWidth&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>283</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AbstractSensor.cpp</fileName>
        <cppcheckFile>
          <key>283</key>
          <fileName>src/AbstractSensor.cpp</fileName>
          <lineNumber>47</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;setOff&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>284</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/AbstractSensor.cpp</fileName>
        <cppcheckFile>
          <key>284</key>
          <fileName>src/AbstractSensor.cpp</fileName>
          <lineNumber>33</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;setOn&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>285</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotShape.cpp</fileName>
        <cppcheckFile>
          <key>285</key>
          <fileName>src/RobotShape.cpp</fileName>
          <lineNumber>36</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;setRobot&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>286</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RobotWorldCanvas.cpp</fileName>
        <cppcheckFile>
          <key>286</key>
          <fileName>src/RobotWorldCanvas.cpp</fileName>
          <lineNumber>412</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;setRobotWorld&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>287</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WallShape.cpp</fileName>
        <cppcheckFile>
          <key>287</key>
          <fileName>src/WallShape.cpp</fileName>
          <lineNumber>60</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;setSelectedAt&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>288</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/RectangleShape.cpp</fileName>
        <cppcheckFile>
          <key>288</key>
          <fileName>src/RectangleShape.cpp</fileName>
          <lineNumber>206</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;setSpacing&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>289</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/Robot.cpp</fileName>
        <cppcheckFile>
          <key>289</key>
          <fileName>src/Robot.cpp</fileName>
          <lineNumber>161</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;setSpeed&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>290</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WallShape.cpp</fileName>
        <cppcheckFile>
          <key>290</key>
          <fileName>src/WallShape.cpp</fileName>
          <lineNumber>53</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;setWall&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>291</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/WayPointShape.cpp</fileName>
        <cppcheckFile>
          <key>291</key>
          <fileName>src/WayPointShape.cpp</fileName>
          <lineNumber>31</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;setWayPoint&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>292</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/MathUtils.cpp</fileName>
        <cppcheckFile>
          <key>292</key>
          <fileName>src/MathUtils.cpp</fileName>
          <lineNumber>15</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;toDegrees&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>293</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <fileName>/var/jenkins_home/jobs/CPlusplus-Template-Project/workspace/src/MathUtils.cpp</fileName>
        <cppcheckFile>
          <key>293</key>
          <fileName>src/MathUtils.cpp</fileName>
          <lineNumber>8</lineNumber>
          <severity>style</severity>
          <cppCheckId>unusedFunction</cppCheckId>
          <message>The function &apos;toRadians&apos; is never used.</message>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>false</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
    <entry>
      <int>294</int>
      <com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
        <cppcheckFile>
          <key>294</key>
          <lineNumber>0</lineNumber>
          <severity>information</severity>
          <cppCheckId>missingInclude</cppCheckId>
          <message>Cppcheck cannot find all the include files (use --check-config for details)</message>
          <verbose>Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config.</verbose>
          <inconclusive>false</inconclusive>
        </cppcheckFile>
        <sourceIgnored>true</sourceIgnored>
      </com.thalesgroup.hudson.plugins.cppcheck.model.CppcheckWorkspaceFile>
    </entry>
  </internalMap>
</org.jenkinsci.plugins.cppcheck.CppcheckSourceContainer>